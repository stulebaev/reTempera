//
//  ColorTemperature.cpp
//  Tempera
//
//  Created by Tulebaev on 11.04.2022.
//
#include "ColorTemperature.hpp"

std::vector<double> ColorTemperature::getColorTemperatureFactors(unsigned long temperature)
{
  struct vector3 { double x,y,z; };
  std::vector<vector3> colorTemperatureFactors {
// Kelvin | Red |  Green  | Blue
  /*1000*/{1.0, 0.18172716, 0.0},
  /*1100*/{1.0, 0.25503671, 0.0},
  /*1200*/{1.0, 0.30942099, 0.0},
  /*1300*/{1.0, 0.35357379, 0.0},
  /*1400*/{1.0, 0.39091524, 0.0},
  /*1500*/{1.0, 0.42322816, 0.0},
  /*1600*/{1.0, 0.45159884, 0.0},
  /*1700*/{1.0, 0.47675916, 0.0},
  /*1800*/{1.0, 0.49923747, 0.0},
  /*1900*/{1.0, 0.51943421, 0.0},
  /*2000*/{1.0, 0.54360078, 0.08679949},
  /*2100*/{1.0, 0.56618736, 0.14065513},
  /*2200*/{1.0, 0.58734976, 0.18362641},
  /*2300*/{1.0, 0.60724493, 0.22137978},
  /*2400*/{1.0, 0.62600248, 0.25591950},
  /*2500*/{1.0, 0.64373109, 0.28819679},
  /*2600*/{1.0, 0.66052319, 0.31873863},
  /*2700*/{1.0, 0.67645822, 0.34786758},
  /*2800*/{1.0, 0.69160518, 0.37579588},
  /*2900*/{1.0, 0.70602449, 0.40267128},
  /*3000*/{1.0, 0.71976951, 0.42860152},
  /*3100*/{1.0, 0.73288760, 0.45366838},
  /*3200*/{1.0, 0.74542112, 0.47793608},
  /*3300*/{1.0, 0.75740814, 0.50145662},
  /*3400*/{1.0, 0.76888303, 0.52427322},
  /*3500*/{1.0, 0.77987699, 0.54642268},
  /*3600*/{1.0, 0.79041843, 0.56793692},
  /*3700*/{1.0, 0.80053332, 0.58884417},
  /*3800*/{1.0, 0.81024551, 0.60916971},
  /*3900*/{1.0, 0.81957693, 0.62893653},
  /*4000*/{1.0, 0.82854786, 0.64816570},
  /*4100*/{1.0, 0.83717703, 0.66687674},
  /*4200*/{1.0, 0.84548188, 0.68508786},
  /*4300*/{1.0, 0.85347859, 0.70281616},
  /*4400*/{1.0, 0.86118227, 0.72007777},
  /*4500*/{1.0, 0.86860704, 0.73688797},
  /*4600*/{1.0, 0.87576611, 0.75326132},
  /*4700*/{1.0, 0.88267187, 0.76921169},
  /*4800*/{1.0, 0.88933596, 0.78475236},
  /*4900*/{1.0, 0.89576933, 0.79989606},
  /*5000*/{1.0, 0.90198230, 0.81465502},
  /*5100*/{1.0, 0.90963069, 0.82838210},
  /*5200*/{1.0, 0.91710889, 0.84190889},
  /*5300*/{1.0, 0.92441842, 0.85523742},
  /*5400*/{1.0, 0.93156127, 0.86836903},
  /*5500*/{1.0, 0.93853986, 0.88130458},
  /*5600*/{1.0, 0.94535695, 0.89404470},
  /*5700*/{1.0, 0.95201559, 0.90658983},
  /*5800*/{1.0, 0.95851906, 0.91894041},
  /*5900*/{1.0, 0.96487079, 0.93109690},
  /*6000*/{1.0, 0.97107439, 0.94305985},
  /*6100*/{1.0, 0.97713351, 0.95482993},
  /*6200*/{1.0, 0.98305189, 0.96640795},
  /*6300*/{1.0, 0.98883326, 0.97779486},
  /*6400*/{1.0, 0.99448139, 0.98899179},
  /*6500*/{1.0, 1.0, 1.0},
  /*6600*/{0.98947904, 0.99348723, 1.0},
  /*6700*/{0.97940448, 0.98722715, 1.0},
  /*6800*/{0.96975025, 0.98120637, 1.0},
  /*6900*/{0.96049223, 0.97541240, 1.0},
  /*7000*/{0.95160805, 0.96983355, 1.0},
  /*7100*/{0.94303638, 0.96443333, 1.0},
  /*7200*/{0.93480451, 0.95923080, 1.0},
  /*7300*/{0.92689056, 0.95421394, 1.0},
  /*7400*/{0.91927697, 0.94937330, 1.0},
  /*7500*/{0.91194747, 0.94470005, 1.0},
  /*7600*/{0.90488690, 0.94018594, 1.0},
  /*7700*/{0.89808115, 0.93582323, 1.0},
  /*7800*/{0.89151710, 0.93160469, 1.0},
  /*7900*/{0.88518247, 0.92752354, 1.0},
  /*8000*/{0.87906581, 0.92357340, 1.0},
  /*8100*/{0.87315640, 0.91974827, 1.0},
  /*8200*/{0.86744421, 0.91604254, 1.0},
  /*8300*/{0.86191983, 0.91245088, 1.0},
  /*8400*/{0.85657444, 0.90896831, 1.0},
  /*8500*/{0.85139976, 0.90559011, 1.0},
  /*8600*/{0.84638799, 0.90231183, 1.0},
  /*8700*/{0.84153180, 0.89912926, 1.0},
  /*8800*/{0.83682430, 0.89603843, 1.0},
  /*8900*/{0.83225897, 0.89303558, 1.0},
  /*9000*/{0.82782969, 0.89011714, 1.0},
  /*9100*/{0.82353066, 0.88727974, 1.0},
  /*9200*/{0.81935641, 0.88452017, 1.0},
  /*9300*/{0.81530175, 0.88183541, 1.0},
  /*9400*/{0.81136180, 0.87922257, 1.0},
  /*9500*/{0.80753191, 0.87667891, 1.0},
  /*9600*/{0.80380769, 0.87420182, 1.0},
  /*9700*/{0.80018497, 0.87178882, 1.0},
  /*9800*/{0.79665980, 0.86943756, 1.0},
  /*9900*/{0.79322843, 0.86714579, 1.0},
 /*10000*/{0.78988728, 0.86491137, 1.0},
 /*10100*/{0.78663296, 0.86273225, 1.0},
 /*10200*/{0.78346225, 0.86060650, 1.0},
 /*10300*/{0.78037207, 0.85853224, 1.0},
 /*10400*/{0.77735950, 0.85650771, 1.0},
 /*10500*/{0.77442176, 0.85453121, 1.0},
 /*10600*/{0.77155617, 0.85260112, 1.0},
 /*10700*/{0.76876022, 0.85071588, 1.0},
 /*10800*/{0.76603147, 0.84887402, 1.0},
 /*10900*/{0.76336762, 0.84707411, 1.0},
 /*11000*/{0.76076645, 0.84531479, 1.0},
 /*11100*/{0.75822586, 0.84359476, 1.0},
 /*11200*/{0.75574383, 0.84191277, 1.0},
 /*11300*/{0.75331843, 0.84026762, 1.0},
 /*11400*/{0.75094780, 0.83865816, 1.0},
 /*11500*/{0.74863017, 0.83708329, 1.0},
 /*11600*/{0.74636386, 0.83554194, 1.0},
 /*11700*/{0.74414722, 0.83403311, 1.0},
 /*11800*/{0.74197871, 0.83255582, 1.0},
 /*11900*/{0.73985682, 0.83110912, 1.0},
 /*12000*/{0.73778012, 0.82969211, 1.0},
 /*12100*/{0.73574723, 0.82830393, 1.0},
 /*12200*/{0.73375683, 0.82694373, 1.0},
 /*12300*/{0.73180765, 0.82561071, 1.0},
 /*12400*/{0.72989845, 0.82430410, 1.0},
 /*12500*/{0.72802807, 0.82302316, 1.0},
 /*12600*/{0.72619537, 0.82176715, 1.0},
 /*12700*/{0.72439927, 0.82053539, 1.0},
 /*12800*/{0.72263872, 0.81932722, 1.0},
 /*12900*/{0.72091270, 0.81814197, 1.0},
 /*13000*/{0.71922025, 0.81697905, 1.0},
 /*13100*/{0.71756043, 0.81583783, 1.0},
 /*13200*/{0.71593234, 0.81471775, 1.0},
 /*13300*/{0.71433510, 0.81361825, 1.0},
 /*13400*/{0.71276788, 0.81253878, 1.0},
 /*13500*/{0.71122987, 0.81147883, 1.0},
 /*13600*/{0.70972029, 0.81043789, 1.0},
 /*13700*/{0.70823838, 0.80941546, 1.0},
 /*13800*/{0.70678342, 0.80841109, 1.0},
 /*13900*/{0.70535469, 0.80742432, 1.0},
 /*14000*/{0.70395153, 0.80645469, 1.0},
 /*14100*/{0.70257327, 0.80550180, 1.0},
 /*14200*/{0.70121928, 0.80456522, 1.0},
 /*14300*/{0.69988894, 0.80364455, 1.0},
 /*14400*/{0.69858167, 0.80273941, 1.0},
 /*14500*/{0.69729688, 0.80184943, 1.0},
 /*14600*/{0.69603402, 0.80097423, 1.0},
 /*14700*/{0.69479255, 0.80011347, 1.0},
 /*14800*/{0.69357196, 0.79926681, 1.0},
 /*14900*/{0.69237173, 0.79843391, 1.0},
 /*15000*/{0.69119138, 0.79761446, 1.0},
 /*15100*/{0.69003044, 0.79680814, 1.0},
 /*15200*/{0.68888844, 0.79601466, 1.0},
 /*15300*/{0.68776494, 0.79523371, 1.0},
 /*15400*/{0.68665951, 0.79446502, 1.0},
 /*15500*/{0.68557173, 0.79370830, 1.0},
 /*15600*/{0.68450119, 0.79296330, 1.0},
 /*15700*/{0.68344751, 0.79222975, 1.0},
 /*15800*/{0.68241029, 0.79150740, 1.0},
 /*15900*/{0.68138918, 0.79079600, 1.0},
 /*16000*/{0.68038380, 0.79009531, 1.0},
 /*16100*/{0.67939381, 0.78940511, 1.0},
 /*16200*/{0.67841888, 0.78872517, 1.0},
 /*16300*/{0.67745866, 0.78805526, 1.0},
 /*16400*/{0.67651284, 0.78739518, 1.0},
 /*16500*/{0.67558112, 0.78674472, 1.0},
 /*16600*/{0.67466317, 0.78610368, 1.0},
 /*16700*/{0.67375872, 0.78547186, 1.0},
 /*16800*/{0.67286748, 0.78484907, 1.0},
 /*16900*/{0.67198916, 0.78423512, 1.0},
 /*17000*/{0.67112350, 0.78362984, 1.0},
 /*17100*/{0.67027024, 0.78303305, 1.0},
 /*17200*/{0.66942911, 0.78244457, 1.0},
 /*17300*/{0.66859988, 0.78186425, 1.0},
 /*17400*/{0.66778228, 0.78129191, 1.0},
 /*17500*/{0.66697610, 0.78072740, 1.0},
 /*17600*/{0.66618110, 0.78017057, 1.0},
 /*17700*/{0.66539706, 0.77962127, 1.0},
 /*17800*/{0.66462376, 0.77907934, 1.0},
 /*17900*/{0.66386098, 0.77854465, 1.0},
 /*18000*/{0.66310852, 0.77801705, 1.0},
 /*18100*/{0.66236618, 0.77749642, 1.0},
 /*18200*/{0.66163375, 0.77698261, 1.0},
 /*18300*/{0.66091106, 0.77647551, 1.0},
 /*18400*/{0.66019791, 0.77597498, 1.0},
 /*18500*/{0.65949412, 0.77548090, 1.0},
 /*18600*/{0.65879952, 0.77499315, 1.0},
 /*18700*/{0.65811392, 0.77451161, 1.0},
 /*18800*/{0.65743716, 0.77403618, 1.0},
 /*18900*/{0.65676908, 0.77356673, 1.0},
 /*19000*/{0.65610952, 0.77310316, 1.0},
 /*19100*/{0.65545831, 0.77264537, 1.0},
 /*19200*/{0.65481530, 0.77219324, 1.0},
 /*19300*/{0.65418036, 0.77174669, 1.0},
 /*19400*/{0.65355332, 0.77130560, 1.0},
 /*19500*/{0.65293404, 0.77086988, 1.0},
 /*19600*/{0.65232240, 0.77043944, 1.0},
 /*19700*/{0.65171824, 0.77001419, 1.0},
 /*19800*/{0.65112144, 0.76959404, 1.0},
 /*19900*/{0.65053187, 0.76917889, 1.0},
 /*20000*/{0.64994941, 0.76876866, 1.0},
 /*20100*/{0.64937392, 0.76836326, 1.0},
 /*20200*/{0.64880528, 0.76796263, 1.0},
 /*20300*/{0.64824339, 0.76756666, 1.0},
 /*20400*/{0.64768812, 0.76717529, 1.0},
 /*20500*/{0.64713935, 0.76678844, 1.0},
 /*20600*/{0.64659699, 0.76640603, 1.0},
 /*20700*/{0.64606092, 0.76602798, 1.0},
 /*20800*/{0.64553103, 0.76565424, 1.0},
 /*20900*/{0.64500722, 0.76528472, 1.0},
 /*21000*/{0.64448939, 0.76491935, 1.0},
 /*21100*/{0.64397745, 0.76455808, 1.0},
 /*21200*/{0.64347129, 0.76420082, 1.0},
 /*21300*/{0.64297081, 0.76384753, 1.0},
 /*21400*/{0.64247594, 0.76349813, 1.0},
 /*21500*/{0.64198657, 0.76315256, 1.0},
 /*21600*/{0.64150261, 0.76281076, 1.0},
 /*21700*/{0.64102399, 0.76247267, 1.0},
 /*21800*/{0.64055061, 0.76213824, 1.0},
 /*21900*/{0.64008239, 0.76180740, 1.0},
 /*22000*/{0.63961926, 0.76148010, 1.0},
 /*22100*/{0.63916112, 0.76115628, 1.0},
 /*22200*/{0.63870790, 0.76083590, 1.0},
 /*22300*/{0.63825953, 0.76051890, 1.0},
 /*22400*/{0.63781592, 0.76020522, 1.0},
 /*22500*/{0.63737701, 0.75989482, 1.0},
 /*22600*/{0.63694273, 0.75958764, 1.0},
 /*22700*/{0.63651299, 0.75928365, 1.0},
 /*22800*/{0.63608774, 0.75898278, 1.0},
 /*22900*/{0.63566691, 0.75868499, 1.0},
 /*23000*/{0.63525042, 0.75839025, 1.0},
 /*23100*/{0.63483822, 0.75809849, 1.0},
 /*23200*/{0.63443023, 0.75780969, 1.0},
 /*23300*/{0.63402641, 0.75752379, 1.0},
 /*23400*/{0.63362667, 0.75724075, 1.0},
 /*23500*/{0.63323097, 0.75696053, 1.0},
 /*23600*/{0.63283925, 0.75668310, 1.0},
 /*23700*/{0.63245144, 0.75640840, 1.0},
 /*23800*/{0.63206749, 0.75613641, 1.0},
 /*23900*/{0.63168735, 0.75586707, 1.0},
 /*24000*/{0.63131096, 0.75560036, 1.0},
 /*24100*/{0.63093826, 0.75533624, 1.0},
 /*24200*/{0.63056920, 0.75507467, 1.0},
 /*24300*/{0.63020374, 0.75481562, 1.0},
 /*24400*/{0.62984181, 0.75455904, 1.0},
 /*24500*/{0.62948337, 0.75430491, 1.0},
 /*24600*/{0.62912838, 0.75405319, 1.0},
 /*24700*/{0.62877678, 0.75380385, 1.0},
 /*24800*/{0.62842852, 0.75355685, 1.0},
 /*24900*/{0.62808356, 0.75331217, 1.0},
 /*25000*/{0.62774186, 0.75306977, 1.0},
 /*25100*/{0.62740336, 0.75282962, 1.0}
};
  auto max_row = colorTemperatureFactors.size()-1;
  size_t index = (temperature - MinColorTemperature)/100;
  if (index < 0 || index > max_row)
    return std::vector<double>{0.0,0.0,0.0};
  else {
    auto factors = colorTemperatureFactors[index];
    return std::vector<double>{factors.x, factors.y, factors.z};
  }
}
